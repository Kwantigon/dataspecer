import { createLens, type Context, setDefaultContext } from "ldkit";
import { <%= it.reader %> } from "<%~ it.reader_interface_path %>";
import { <%= it.ldkitSchemaSelector %> } from "<%= it.schema_selector_path %>";

export default class LdkitReader implements <%= it.reader %> {

    private readonly _schemaSelector: <%= it.ldkitSchemaSelector %>;

    constructor() {
        this._schemaSelector = new <%= it.ldkitSchemaSelector %>();
    }

    async readObjects(aggregateName: string): Promise<object[]> {

        const ldkitSource = this._schemaSelector.getLDkitSchema(aggregateName);
        const context: Context = {
            sources: [ldkitSource.datasource]
        }
        setDefaultContext(context);

        const EntityLens = createLens(ldkitSource.schema);
        const fetchedEntities = await EntityLens.find();

        if (!fetchedEntities) {
            throw new Error("Error on data read.");
        }

        console.log("Fetch log:", fetchedEntities);

        return fetchedEntities;
    }
}
