import React from 'react';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TableRow from '@mui/material/TableRow';
import { useEffect, useState } from 'react';
import { <%= it.app_logic_delegate %> } from "<%~ it.delegate_path %>";

export default function OverviewTable() {

    const [overviewObjects, setOverviewObjects] = useState(undefined as unknown as object[]);

    const stringify = (objectKey) => {
        //console.log(objectKey)
        return typeof objectKey == 'object'
            ? Object.keys(objectKey).map(k => stringify(objectKey[k])).join(" || ")
            : objectKey.toString();
    }

    function excludeKey(obj: object, keys: string[]): object {
        const newObj = { ...obj };
        keys.forEach(k => delete newObj[k]);

        return newObj;
    }

    useEffect(() => {
        if (!overviewObjects) {
            <%= it.app_logic_delegate %>(setOverviewObjects);
        }
    }, [overviewObjects]);

    return (
        <TableContainer>
            <Table sx={{ minWidth: 650 }} aria-label="simple table"></Table>
            {overviewObjects &&
                <>
                    <TableHead>
                        <TableRow>
                            {overviewObjects.length > 0
                                ? Object
                                    .keys(excludeKey(overviewObjects[0], ["$id", "$type"]))
                                    .map((key, ix) => {
                                        //console.log("KEY: ", key);
                                        return <TableCell key={ix} align="right">
                                            <strong>{key}</strong>
                                        </TableCell>
                                    })
                                : (<TableRow sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                                    <TableCell align="right">No corresponding objects found.</TableCell>
                                </TableRow>)
                            }
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {overviewObjects.length > 0 &&
                            overviewObjects.map((obj, idx) =>
                                <TableRow
                                    key={idx}
                                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}>
                                    {Object
                                        .keys(excludeKey(obj, ["$id", "$type"]))
                                        .map((key, ix) => {
                                            return <TableCell key={ix} align="right">
                                                {stringify(obj[key])}
                                            </TableCell>
                                        })
                                    }
                                </TableRow>
                            )
                        }
                    </TableBody>
                </>
            }
        </TableContainer>
    )
}