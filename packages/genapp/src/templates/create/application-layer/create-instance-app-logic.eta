import { SchemaInterface } from "ldkit";
import { Entity } from "ldkit/types/library/lens/types";
import { <%= it.ldkit_schema %> } from <%~ it.ldkit_schema_path %>;
import { <%= it.creator_interface_type %> /* LdkitInstanceCreator */ } from <%~ it.creator_interface_type_path %>;
import { <%= it.instance_creator_type %> } from <%~ it.instance_creator_type_path %>;
import { <%= it.generated_capability_class %>, <%= it.read_return_type %> } from <%~ it.read_return_type_path %>;
 
export const <%= it.aggregate_name %>CreateCapabilityLogic: <%= it.generated_capability_class %><<%= it.read_return_type %>> = {    
    name: "create",

    async runCapability(instanceIri: string): Promise<<%= it.read_return_type %>> {

        const newInstance: Entity<SchemaInterface<typeof <%= it.ldkit_schema %>>> = {
            $id: instanceIri,
            $type: [
                "http://www.w3.org/ns/dcat#Dataset"
            ],
            title: {
                "cs": "Novy dataset",
                "en": "New dataset"
            },
            klicove_slovo: {
                "cs": ["datova sada", "testovani"],
                "en": ["dataset", "test"]
            },
            distribuce: [
                "<iri nove distribuce 1>",
                "<iri nove distribuce 2>"
            ]
        }

        const creator: <%= it.creator_interface_type %> = new <%= it.instance_creator_type %>();
        const instanceResult: <%= it.read_return_type %> = await creator.createInstance(newInstance);

        return instanceResult;
    },
}