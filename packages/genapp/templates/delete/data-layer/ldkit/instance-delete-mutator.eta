import { Context, createLens } from "ldkit";
import { <%= it.instance_result_type %> } from <%~ it.instance_result_type_path %>;
import { <%= it.ldkit_schema %> } from <%~ it.ldkit_schema_path %>;
import { <%= it.delete_mutator_interface_type %> } from <%~ it.delete_mutator_interface_type_path %>;

export class <%= it.exported_object_name %> implements <%= it.delete_mutator_interface_type %> {

    async deleteInstance(instanceIri: string): Promise<<%= it.instance_result_type %>> {

        const context: Context = {
            sources: ["<%~ it.sparql_endpoint_uri.read %>"]
        }

        const lens = createLens(<%= it.ldkit_schema %>, context);
        const toDelete = await lens.findByIri(instanceIri);

        if (!toDelete) {
            const notFoundResult: <%= it.instance_result_type %> = {
                instance: null,
                message: "Could not find the instance to be deleted.",
                redirectUrl: "/"
            }

            return notFoundResult;
        }

        let result: <%= it.instance_result_type %>;

        try {
            const deleteLens = createLens(<%= it.ldkit_schema %>, {
                sources: ["<%~ it.sparql_endpoint_uri.write %>"]
            })
            await deleteLens.delete(toDelete);

            result = {
                instance: {
                    aggregateName: "<%= it.aggregate_name %>",
                    raw: toDelete.$id
                },
                message: "Instance deleted successfully",
                redirectUrl: "/"
            }  as <%= it.instance_result_type %>;

        } catch {
            result = {
                instance: null,
                message: "Could not delete instance.",
                redirectUrl: "/"
            } as <%= it.instance_result_type %>;
        }

        return result;
    }
}
