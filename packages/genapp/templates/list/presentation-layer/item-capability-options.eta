import React, { useState } from 'react';
import Menu from "@mui/material/Menu";
import MenuItem from "@mui/material/MenuItem";
import IconButton from "@mui/material/IconButton";
import MoreVertIcon from '@mui/icons-material/MoreVert';
import { createSearchParams, useNavigate } from 'react-router-dom';

export const <%= it.export_name %> = ({ instanceId }: { instanceId: string }) => {

    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
    const open = Boolean(anchorEl);
    const navigate = useNavigate();

    const handleClose = () => setAnchorEl(null);
    const handleClick = (event: React.MouseEvent<HTMLElement>) => {
        setAnchorEl(event.currentTarget);
    }

    const handleInstanceCapabilityRedirect = (urlPath: string) => {
        handleClose();
        navigate({
            pathname: urlPath,
            search: createSearchParams({
                "instanceId": instanceId
            }).toString()
        });
    }

    const ITEM_HEIGHT = 48;

    return (
        <>
            <IconButton
                aria-label="instance-more-options"
                id="long-button"
                aria-controls={open ? "<%= it.aggregate_technical_label %>-menu" : undefined}
                aria-expanded={open ? "true" : undefined}
                aria-haspopup="true"
                onClick={handleClick}
            >
                <MoreVertIcon />
            </IconButton>
            <Menu
                id="<%= it.aggregate_technical_label %>-menu"
                MenuListProps={{ "aria-labelledby": "long-button" }}
                anchorEl={anchorEl}
                open={open}
                onClose={handleClose}
                slotProps={{
                    paper: {
                        style: {
                            maxHeight: ITEM_HEIGHT * 4.5,
                            width: "20ch"
                        }
                    }
                }}
            ><% for (let index = 0; index < it.capability_transitions.length; index++) { %><% const transition = it.capability_transitions[index]; %>
                <MenuItem key={"<%~ transition.id %>"}
                    onClick={() => handleInstanceCapabilityRedirect("<%~ transition.id %>")}
                >
                    <%~ transition.label %>
                </MenuItem><% } %>
            </Menu>
        </>
    )
}