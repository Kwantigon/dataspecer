<%
    function splitRecordToKeyAndValueTypes(recordTypeName) {

        const recordTypeBeginMarker = "<";
        const recordTypeEndMarker = ">";
        const recordKeyValueTypeSeparator = ", ";

        const keyTypeName = recordTypeName.substring(
            recordTypeName.indexOf(recordTypeBeginMarker) + recordTypeBeginMarker.length,
            recordTypeName.lastIndexOf(recordKeyValueTypeSeparator)
        );

        const valueTypeName = recordTypeName.substring(
            recordTypeName.indexOf(recordKeyValueTypeSeparator) + recordKeyValueTypeSeparator.length,
            recordTypeName.lastIndexOf(recordTypeEndMarker)
        );

        return [keyTypeName, valueTypeName];
    }

    function convertSerializedTypeToTypescriptType(obj) {
        const result = Object.entries(obj)
            .map(([propName, typeName]) => {

                if (typeName.endsWith("[]")) {
                    const nestedStr = typeName.substring(0, typeName.length - "[]".length);
                    try {
                        const nested = JSON.parse(nestedStr);
                        return `${propName}: ${convertSerializedTypeToTypescriptType(nested)}[],`
                    } catch {
                        return `${propName}: ${nestedStr}[],`
                    }
                }

                if (typeName.startsWith("{")) {
                    const nested = JSON.parse(typeName);
                    return `${propName}: { ${convertSerializedTypeToTypescriptType(nested)} }`
                }

                if (typeName.startsWith("Record")) {
                    const [keyTypeName, valueTypeName] = splitRecordToKeyAndValueTypes(typeName);
                    return `${propName}: { [key: ${keyTypeName}]: ${valueTypeName} },`
                }

                return `"${propName}": ${typeName},`
            })
            .filter(item =>  item !== undefined && item !== null)
            .join("\n");

        return `{
            ${result}
        }`;
    }
%>
export type <%= it.object_model_type_name %> = <%~ convertSerializedTypeToTypescriptType(it.object_model_type) %>
