// https://rjsf-team.github.io/react-jsonschema-form/
import { useState } from "react";
import Form from "@rjsf/mui";
import Alert from '@mui/material/Alert';
import validator from "@rjsf/validator-ajv8";
import { RJSFSchema, RJSFValidationError } from "@rjsf/utils";
import { <%= it.navigation_hook %> } from <%~ it.navigation_hook_path %>;
import * as <%= it.json_schema %> from <%~ it.json_schema_path %>;
import { <%= it.create_capability_app_layer %> } from <%~ it.create_capability_app_layer_path %>;

const <%= it.exported_object_name %> = () => {

    const [isUpdateMode, setUpdateMode] = useState<boolean>(false);
    const [formData, setFormData] = useState<RJSFSchema>({});
    const [hasError, setHasError] = useState<boolean>(false);
    const navigationHooks = <%= it.navigation_hook %>();

    const schema: RJSFSchema = <%~ it.json_schema %> as RJSFSchema;

    const handleFormChange = (data: any, id?: string) => {
      console.log("element id: ", id);
      console.log("DATA: ", data);
    }

    const submitNewInstance = async (data: any, event: React.FormEvent<any>) => {
        event.preventDefault();

        const { formData } = data;
        // const createdInstanceResult = await DataSetCreateCapabilityLogic.runCapability(formData);
        // get createdInstanceResult id
        <% if (it.redirects && it.redirects.length > 0) { %><% const firstRedirect = it.redirects.at(0); %>
        navigationHooks.<%= firstRedirect.capabilityType === "instance" ? "handleInstanceCapabilityRedirect" : "handleCollectionCapabilityRedirect" %>("<%~ firstRedirect.id %>");
        <% } %>
    }

    const handleSubmitError = (errors: RJSFValidationError[]) => {
        console.error(errors);
        setHasError(true);
    }

    return (
        <div>
            { hasError && <Alert onClose={() => {}} severity="error">This is an error Alert.</Alert> }
            <Form
                schema={schema}
                validator={validator}
                onChange={handleFormChange}
                onSubmit={submitNewInstance}
                onError={handleSubmitError}
                uiSchema={{}}
                formData={formData}
                showErrorList="top"
            >
                {isUpdateMode && (<div>
                    <button type='submit'>Submit</button>
                    <button type='button'>Cancel</button>
                </div>)}
            </ Form>
        </div>
    );
}

export default <%= it.exported_object_name %>;
