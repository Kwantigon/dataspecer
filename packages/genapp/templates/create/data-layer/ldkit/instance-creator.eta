import { Entity } from "ldkit/types/library/lens/types";
import { Context, SchemaInterface, createLens } from "ldkit";
import { <%= it.instance_result_type %> } from <%~ it.instance_result_type_path %>;
import { <%= it.ldkit_schema %> } from <%~ it.ldkit_schema_path %>;
import { <%= it.creator_interface_type %> } from <%~ it.creator_interface_type_path %>;

export class <%= it.exported_object_name %> implements <%= it.creator_interface_type %>  {

    private mapFormDataToLdkitSchema(formData: any): Entity<SchemaInterface<typeof <%= it.ldkit_schema %>>> {
        console.log("input form data: ", formData);

        const newInstance: Entity<SchemaInterface<typeof <%= it.ldkit_schema %>>> = this.updateLdkitProperties(formData);

        return newInstance;
    }

    private updateLdkitProperties(obj: any) {

        if (typeof obj !== "object") {
            return obj;
        }

        const transformed = Object.entries(obj)
            .map(([key, value]) => {
                if (key === "id") {
                    return ["$id", value];
                }

                if (key === "@type") {
                    return ["$type", value];
                }

                if (Array.isArray(value)) {
                    return [key, value.map(item => this.updateLdkitProperties(item))];
                }

                if (typeof value === "object") {
                    return [key, this.updateLdkitProperties(value)];
                }

                return [key, value];
            });

        return Object.fromEntries(transformed);
    }

    async createInstance(formData: any): Promise<<%= it.instance_result_type %>> {

        const context: Context = {
            sources: [<%~ it.sparql_endpoint_uri %>]
        }

        const lens = createLens(<%= it.ldkit_schema %>, context);
        const newInstance: Entity<SchemaInterface<typeof <%= it.ldkit_schema %>>> = this.mapFormDataToLdkitSchema(formData);

        try {
            //await lens.insert(newInstance);
            console.log("creation success");

            const result: <%= it.instance_result_type %> = {
                instance: {
                    aggregateName: "<%= it.aggregate_name %>",
                    raw: newInstance.$id
                },
                message: "Instance created successfully",
                redirectUrl: "/"
            }

            return result;
        } catch (error) {
            const errorResult: <%= it.instance_result_type %> = {
                instance: null,
                message: "Instance creation failed",
                redirectUrl: "/"
            };

            return errorResult;
        }
    }
}
