import { useEffect, useState } from 'react';
import { <%= it.detail_capability_app_layer %> } from <%~ it.detail_app_layer_path %>;
// TODO: line below might need proper generator
import { AggregateInstance } from '../../interfaces/capability-result';
import { useSearchParams } from 'react-router-dom';
import Form from "@rjsf/mui";
import validator from "@rjsf/validator-ajv8";
import { RJSFSchema } from "@rjsf/utils";

export default function <%= it.export_name %>() {

    const [instance, setInstance] = useState<AggregateInstance>();
    const [loadingStatus, setLoadingStatus] = useState<boolean>(true);
    const [searchParams, _] = useSearchParams();
    const [instanceId, setInstanceId] = useState<string>("");

    const schema: RJSFSchema = <%~ it.json_schema %>;
    const debugView = false;

    useEffect(() => {

        const fetchInstanceDetail = async () => {
            if (!instance) {
                const id = searchParams.get("instanceId");

                if (!id) {
                    setLoadingStatus(false);
                    return;
                }

                const result = await <%= it.detail_capability_app_layer %>.runCapability(id);

                if (!result || !result.instance) {
                    console.error("No instance detail available");
                    return;
                }

                setLoadingStatus(false);
                result.instance.raw["id"] = result.instance.raw["$id"]; // TODO: perform based on data layer / schema
                setInstance(result.instance);
                setInstanceId(id);
            }
        }

        fetchInstanceDetail();
    }, [loadingStatus, instance, searchParams]);

    return (
        <>
            <h2>Detail of "<%= it.aggregate_name %>" instance</h2>
            <% for (let index = 0; index < it.capability_transitions.length; index++) { %><% const transition = it.capability_transitions[index]; %>
                <button key={"<%= transition.id %>"} onClick={() => alert("Should redirect to <%= transition.id %>")}><%= transition.label %></button>
            <% } %>
            {
                debugView &&
                <div>
                    {
                        !loadingStatus && (
                            instance
                                ? JSON.stringify(instance)
                                : "No detail"
                        )
                    }
                </div>
            }
            {
                !loadingStatus && instance &&
                <Form
                    id={`<%= it.aggregate_name %>__${instanceId}`}
                    schema={schema}
                    validator={validator}
                    uiSchema={{}}
                    formData={instance.raw}
                    showErrorList="top"
                    readonly={true}
                />
            }
        </>
    )
}