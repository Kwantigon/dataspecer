import { useEffect, useState } from 'react';
import { <%= it.detail_capability_app_layer %> } from <%~ it.detail_app_layer_path %>;
// TODO: line below might need proper generator
import { AggregateInstance } from '../../interfaces/capability-result';
import { useSearchParams } from 'react-router-dom';
import Alert from '@mui/material/Alert';
import { Backdrop, CircularProgress } from '@mui/material';
import Form from "@rjsf/mui";
import validator from "@rjsf/validator-ajv8";
import { RJSFSchema } from "@rjsf/utils";
import * as <%= it.json_schema %> from <%~ it.json_schema_path %>;

export default function <%= it.export_name %>() {

    const [instance, setInstance] = useState<AggregateInstance>();
    const [isMissingInstance, setMissingInstance] = useState<boolean>(false);
    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [searchParams, setSearchParams] = useSearchParams();
    const [instanceId, setInstanceId] = useState<string>("");

    const schema: RJSFSchema = <%~ it.json_schema %> as RJSFSchema;
    const debugView = false;

    useEffect(() => {

        const fetchInstanceDetail = async () => {
            if (!instance) {
            console.log(searchParams);
                const id = searchParams.get("instanceId");

                if (!id) {
                    setMissingInstance(true);
                    setIsLoading(false);
                    return;
                }

                const result = await <%= it.detail_capability_app_layer %>.runCapability(id);

                setIsLoading(false);
                if (!result?.instance?.raw) {
                    setMissingInstance(true);
                    return;
                }

                result.instance.raw["id"] = result.instance.raw["$id"]; // TODO: perform based on data layer / schema
                setInstance(result.instance);
                setInstanceId(id);
            }
        }

        fetchInstanceDetail();
    }, [isLoading, instance, searchParams]);

    return (
        <>
            <h2>Detail of "<%= it.aggregate_name %>" instance</h2>
            <% for (let index = 0; index < it.capability_transitions.length; index++) { %><% const transition = it.capability_transitions[index]; %>
                <button key={"<%= transition.id %>"} onClick={() => alert("Should redirect to <%= transition.id %>")}><%= transition.label %></button>
            <% } %>
            {
                debugView &&
                <div>
                    {
                        !isLoading && (
                            instance
                                ? JSON.stringify(instance)
                                : "No detail"
                        )
                    }
                </div>
            }
            { isMissingInstance && <Alert onClose={() => {}} severity="error">{`No valid instance found for ${instanceId}`}</Alert> }
            <Backdrop
                sx={(theme) => ({ color: '#fff', zIndex: theme.zIndex.drawer + 1 })}
                open={isLoading}
            >
                <CircularProgress color="inherit" />
            </Backdrop>
            {
                !isLoading &&
                (
                    isMissingInstance
                    ? <div>{`No valid instance found for ${instanceId}`}</div>
                    : <Form
                    id={`data-set__${instanceId}`}
                    schema={schema}
                    validator={validator}
                    uiSchema={{}}
                    formData={instance!.raw}
                    showErrorList="top"
                    readonly={true}
                />
                )
            }
        </>
    )
}