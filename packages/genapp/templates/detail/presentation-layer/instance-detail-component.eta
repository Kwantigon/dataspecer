import {
    useEffect,
    useState,
    FC, ReactElement,
    ReactNode,
    Children,
    cloneElement,
    isValidElement
} from "react";
import { useSearchParams } from "react-router-dom";
import Alert from '@mui/material/Alert';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import { Backdrop, CircularProgress } from '@mui/material';
// TODO: line below might need proper generator
import { AggregateInstance } from '../../interfaces/capability-result';
import { <%= it.navigation_hook %> } from <%~ it.navigation_hook_path %>;
import { <%= it.detail_capability_app_layer %> } from <%~ it.detail_app_layer_path %>;
<%
    const arrayRendererComponentName = "ArrayRenderer";
    const recordRendererComponentName = "RecordRenderer";

    function splitRecordToKeyAndValueTypes(recordTypeName) {

        const recordTypeBeginMarker = "<";
        const recordTypeEndMarker = ">";
        const recordKeyValueTypeSeparator = ", ";

        const keyTypeName = recordTypeName.substring(
            recordTypeName.indexOf(recordTypeBeginMarker) + recordTypeBeginMarker.length,
            recordTypeName.lastIndexOf(recordKeyValueTypeSeparator)
        );

        const valueTypeName = recordTypeName.substring(
            recordTypeName.indexOf(recordKeyValueTypeSeparator) + recordKeyValueTypeSeparator.length,
            recordTypeName.lastIndexOf(recordTypeEndMarker)
        );

        return [keyTypeName, valueTypeName];
    }

    function getDetailRenderComponentByProperty(propertyName, typeName, instanceRef) {

        let valueReference = (propertyName !== null && propertyName !== "")
            ? `${instanceRef}["${propertyName}"]`
            : instanceRef;

        if (!instanceRef || instanceRef === "") {
            valueReference = '""';
            propertyName = "";
        }

        if (propertyName === "@type" || propertyName === "@id") {
            return "";
        }


        let componentName = "DefaultObjectRenderer";

        if (typeName.endsWith("[]")) {
            const arrayTypeName = typeName.substring(0, typeName.lastIndexOf("[]"));
            return (
                `<${arrayRendererComponentName}
                    name="${propertyName ?? ""}"
                    value={${valueReference}}
                >
                    ${getDetailRenderComponentByProperty("", arrayTypeName, `${valueReference}`)}
                </${arrayRendererComponentName}>
                `)
        }

        if (typeName.startsWith("Record")) {
            const [keyTypeName, valueTypeName] = splitRecordToKeyAndValueTypes(typeName);
            return (
                `<${recordRendererComponentName}
                        name="${propertyName ?? ""}"
                        value={${valueReference}}
                >
                    ${getDetailRenderComponentByProperty("", keyTypeName, "")}
                    ${getDetailRenderComponentByProperty("", valueTypeName, "")}
                </${recordRendererComponentName}>
                `
            );
        }

        if (typeName.startsWith("{")) {
            const nestedObjectType = JSON.parse(typeName);

            const nestedComponents = Object.entries(nestedObjectType ?? {})
                .map(
                    ([nestedKey, nestedTypeRef]) => getDetailRenderComponentByProperty(nestedKey, nestedTypeRef, valueReference)
                );

            return nestedComponents.join("\n");
        }

        switch (typeName) {
            case "string":
                componentName = "StringRenderer"
                break;
            default:
                componentName = "DefaultObjectRenderer"
        }

        return `<${componentName} name={"${propertyName ?? ""}"} value={${valueReference}}/>`
    }
%>
const PropertyAlert = ({ errorPropertyName }: { errorPropertyName: string}) => {
    return <Alert severity="error">Instance property "{errorPropertyName}" does not correspond to declared schema.</Alert>
}

type ComponentProps = {
    name: any,
    value: any
}

const DefaultObjectRenderer: FC<ComponentProps> = ({ name, value }) => {

    return (
        <div>
            { JSON.stringify(value) }
        </div>
    )
}

const StringRenderer: FC<ComponentProps> = ({ name, value }) => {

    const [isValidUrl, setIsValidUrl] = useState<boolean>(false);

    useEffect(() => {
        try {
            new URL(value);
            setIsValidUrl(true);
        } catch {
            setIsValidUrl(false);
        }
    }, [value]);

    return (
        <Box component="section">
            <Typography variant="body1">
                {
                    isValidUrl
                        ? <LinkRenderer name={name} value={value}/>
                        : value
                }
            </Typography>
        </Box>
    )
}

const LinkRenderer: FC<ComponentProps> = ({ name, value }) => {

    return (
        <Box component="section">
            <a href={value}>
                {value}
            </a>
        </Box>
    )
}

const KeyValuePair: FC<ComponentProps> = (props) => {

    const { name: objectKey, value: objectValue} = props;

    return (
        <Box mb="lg">
            <Typography variant="body1">
                {objectKey}
            </Typography>
            <Typography variant="body2">
                {objectValue}
            </Typography>
        </Box>
    );
}

const <%~ recordRendererComponentName %>: FC<ComponentProps & { children: ReactElement<ComponentProps> | ReactNode }> = (props) => {

    const { name: objectName, value, children } = props;

    return (
        <Box component="section">
            {(typeof value !== "object")
                ? <PropertyAlert errorPropertyName={objectName} />
                : (Object.entries(value)
                        .map(([key, value]) => {

                            const ch: (string | number | ReactElement<any, string | React.JSXElementConstructor<any>> | Iterable<ReactNode> | React.ReactPortal)[] = Children.toArray(children);

                            if (ch.length !== 2) {
                                return JSON.stringify(Object.fromEntries([[key,value]]));
                            }

                            const [keyChild, valueChild] = ch;

                            if (!isValidElement(keyChild)) {
                                return keyChild;
                            }

                            const keyCloned = cloneElement(keyChild, {
                                name: key,
                                value: key
                            });

                            const valueCloned = cloneElement(valueChild, {
                                name: key,
                                value: value
                            });

                            return [keyCloned, valueCloned];
                        }
                    )
                )
            }
        </Box>
    );
}

const <%~ arrayRendererComponentName %>: FC<ComponentProps & { children: ReactElement<ComponentProps> | ReactNode }> = (props) => {

    const { name: title, value: arrayRef, children } = props;

    return (
        <Box component="section">
            {(!Array.isArray(arrayRef))
                ? <PropertyAlert errorPropertyName={title} />
                : (
                    ((arrayRef || []).length === 0)
                        ? "Empty list"
                        : (
                            <ul>
                                {(arrayRef || []).map((item, idx) => {
                                    console.log("ARRAY ITEM: ", item);
                                    if (item && (["string", "number", "boolean"].includes(typeof item))) {
                                        return (
                                            <li key={idx}>
                                                {JSON.stringify(item)}
                                            </li>
                                        );
                                    }

                                    return (
                                        <li key={idx}>
                                            {
                                                Children.map(children, child => {
                                                    if (!isValidElement(child)) {
                                                        return child;
                                                    }

                                                    const name: string = child.props.name as string;
                                                    console.log("CHILD NAME PROP: ", name);
                                                    const value: any = item;

                                                    console.log("UPDATED VALUE: ", value);
                                                    const cloned = cloneElement(child, {
                                                        key: idx,
                                                        value
                                                    });
                                                    console.log("CLONED: ", cloned);

                                                    return cloned;
                                                })
                                            }
                                        </li>
                                    )
                                    })}
                            </ul>
                        )
                )
            }
        </Box>
    )
}

export default function <%= it.export_name %>() {

    const [instance, setInstance] = useState<AggregateInstance>();
    const [isMissingInstance, setMissingInstance] = useState<boolean>(false);
    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [searchParams, setSearchParams] = useSearchParams();
    const [instanceId, setInstanceId] = useState<string>("");
    const navigationHooks = <%= it.navigation_hook %>();

    const handleDetailClick = (link: string, capabilityType: string) => {

        if (capabilityType === "instance") {
            navigationHooks.handleInstanceCapabilityRedirect(link, instanceId);
        } else {
            navigationHooks.handleCollectionCapabilityRedirect(link);
        }
    }

    useEffect(() => {

        const fetchInstanceDetail = async () => {
            if (!instance) {
                const id = searchParams.get("instanceId");

                if (!id) {
                    setMissingInstance(true);
                    setIsLoading(false);
                    return;
                }

                const result = await <%= it.detail_capability_app_layer %>.runCapability(id);

                setIsLoading(false);
                if (!result?.instance?.raw) {
                    setMissingInstance(true);
                    return;
                }

                setInstance(result.instance);
                setInstanceId(id);
            }
        }

        fetchInstanceDetail();
    }, [isLoading, instance, searchParams]);

    return (
        <><% const defaultPageTitle = "Detail of \"it.aggregate_name\" instance" %>
            <h2><%~ it.page_title ?? defaultPageTitle %></h2>
            <Backdrop
                sx={(theme) => ({ color: '#fff', zIndex: theme.zIndex.drawer + 1 })}
                open={isLoading}
            >
                <CircularProgress color="inherit" />
            </Backdrop>
            <% for (let index = 0; index < it.capability_transitions.length; index++) { %><% const transition = it.capability_transitions[index]; %>
                <Button key={"<%= transition.id %>"} id="<%= transition.id %>-transition-button" disabled={isLoading} sx={{ marginRight: 1 }} variant="contained" onClick={() => handleDetailClick("<%= transition.id %>", "<%= transition.capabilityType %>")}><%= transition.label %></Button>
            <% } %>
            { isMissingInstance && <Alert onClose={() => {}} severity="error">{`No valid instance found for ${instanceId}`}</Alert> }
            { instance &&
                <Box id="<%= it.aggregate_name %>-detail" component="section">
                <% const dataSchemaInterfaceEntries = Object.entries(it.schema); %>
                <% for (let index = 0; index < dataSchemaInterfaceEntries.length; index++) { %>
                    <% const [propName, propTypeName] = dataSchemaInterfaceEntries[index]; %>
                    <Box id="<%~ propName %>-property-key" component="section" sx={{ p: 2, paddingBottom: 1 }}>
                        <Typography variant="h5" id="<%~ propName %>-property-key"><% const displayName = `${propName.charAt(0).toUpperCase()}${propName.slice(1).replace(/[_-]/g, " ")}` %>
                            <%~ displayName %>:
                        </Typography>
                        <Typography variant="body1" id="<%~ propName %>-property-value">
                            <%~ getDetailRenderComponentByProperty(propName, propTypeName, "instance.raw") %>
                        </Typography>
                    </Box>
                <% } %>
                </Box>
            }
            <Box component="section" sx={{
                p: 1,
                color: "transparent",
                width: window.innerWidth,
                height: "10%"
            }} />
        </>
    )
}