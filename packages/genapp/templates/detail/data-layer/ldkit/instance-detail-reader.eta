import { Context, setDefaultContext, createLens } from "ldkit";
import { <%= it.ldkit_instance_reader %> } from <%~ it.ldkit_instance_reader_path %>;
import { <%= it.instance_result_type %> } from <%~ it.instance_result_type_path %>;
import { <%= it.ldkit_schema %> } from <%~ it.ldkit_schema_path %>;

export default class <%= it.exported_name_object %> implements <%= it.ldkit_instance_reader %> {

    async readInstance(instanceIri: string): Promise<<%= it.instance_result_type %>> {

        const context: Context = {
            sources: [<%~ it.ldkit_endpoint_uri %>]
        }

        setDefaultContext(context);
        <% const instanceVariable = `${it.aggregate_name}InstanceDetail`; %>
        const <%= instanceVariable %> = await this.getInstanceDetail(instanceIri, <%= it.ldkit_schema %>);

        if (!<%= instanceVariable %>) {
            const emptyResult: <%= it.instance_result_type %> = {
                instance: {
                    aggregateName: "<%= it.aggregate_name %>",
                    raw: null
                }
            };

            return emptyResult;
        }

        const result: <%= it.instance_result_type %> = {
            instance: {
                aggregateName: "<%= it.aggregate_name %>",
                raw: <%= instanceVariable %>
            }
        }

        return result;
    }

    private async getInstanceDetail(iri: string, schema: object) {
        const lens = createLens(schema);
        const instanceDetail = await lens.findByIri(iri);

        await this.populateNestedDetails(instanceDetail, schema);

        return instanceDetail;
    }

    private async populateNestedDetails(instanceDetail: object, schema: object) {

        if (!instanceDetail) {
            return;
        }

        const promises = Object.entries(schema)
            .map(async ([attrName, attrValue]) => {
                const nestedSchema = attrValue["@schema"];

                if (!nestedSchema) {
                    return;
                }

                const instanceValue = instanceDetail[attrName];

                if (Array.isArray(instanceValue)) {
                    const resultPromises = instanceValue
                        .filter(str => typeof str === "string" && (str.startsWith("http")))
                        .map(async iri => {
                            const nestedItem = await this.getInstanceDetail(iri, nestedSchema);

                            return nestedItem
                                ? nestedItem
                                : iri;
                        });

                    const nestedItems = await Promise.all(resultPromises);
                    instanceDetail[attrName] = nestedItems;
                    return;
                }

                if (typeof instanceValue === "string" && instanceValue.startsWith("http")) {
                    const subInstanceIri: string = instanceValue;
                    const nestedItem = await this.getInstanceDetail(subInstanceIri, nestedSchema);

                    if (!nestedItem) {
                        return;
                    }

                    instanceDetail[attrName] = nestedItem;
                }
            })

        await Promise.all(promises);

        // return instanceDetail;
    }
}
