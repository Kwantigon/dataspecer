generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../database/database.db?connection_limit=1"
}

// Resource represents both package and model of various types.
model Resource {
  // Internal numerical ID for database purposes
  id Int @id @default(autoincrement())

  // Parent of the resource, if any.
  // If the resource is a root resource, this field is null.
  // Each model must have a parent, except for the roots.
  // List of children should be stored in the model itself, but for now, we will keep it here for simplicity.
  parentResourceId Int?

  // Public IRI of the resource.
  iri String @unique

  // Type of the resource that will be used to correctly determine how the resource should be handled.
  // It can be package, mounted package, conceptual model, EA file, etc.
  // This is only a type in context of this Prisma storage. In Github, or mounted packages, this types could be different.
  // We distinguish between types of representation and interpretation. This is the representation type.
  representationType String

  // Link to raw data of the resource.
  // There can be multiple data stores for the same resource.
  // You can consider them as individual files.
  // Most models will have only one file.
  // Default name is "model".
  dataStoreId String @default("{}")

  // User metadata that are common for all resources.
  // It could be a name, description, tags, etc.
  // This should be part of the model itself, but for now, we will keep it here for simplicity.
  userMetadata String @default("{}")

  // Technical metadata: creation date.
  createdAt DateTime @default(now())

  // Technical metadata: modification date.
  // It should be updated every time the iri, type, data stores or user metadata are changed.
  modifiedAt DateTime @updatedAt

  // Technical metadata: last time the subtree was modified.
  // It should represent the max time of all children.
  subtreeModifiedAt DateTime @updatedAt
}
