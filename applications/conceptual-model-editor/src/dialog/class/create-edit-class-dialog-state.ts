import { VisualModel } from "@dataspecer/core-v2/visual-model";
import { InMemorySemanticModel } from "@dataspecer/core-v2/semantic-model/in-memory";

import { ClassesContextType } from "../../context/classes-context";
import { ModelGraphContextType } from "../../context/model-context";
import { EditClassDialogState } from "./edit-class-dialog-controller";
import { representClasses, representModels, representSpecializations, selectWritableModels, sortRepresentatives } from "../utilities/dialog-utilities";
import { sanitizeDuplicitiesInRepresentativeLabels } from "../../utilities/label";
import { getModelIri } from "../../util/iri-utils";
import { SemanticModelClass } from "@dataspecer/core-v2/semantic-model/concepts";

export function createEditClassDialogState(
  classesContext: ClassesContextType,
  graphContext: ModelGraphContextType,
  visualModel: VisualModel | null,
  language: string,
  model: InMemorySemanticModel,
  entity: SemanticModelClass,
): EditClassDialogState {
  const models = [...graphContext.models.values()];
  const availableModels = representModels(visualModel, models);
  const writableModels = representModels(visualModel, selectWritableModels(models));

  const availableClasses = sanitizeDuplicitiesInRepresentativeLabels(
    availableModels,
    representClasses(models, classesContext.classes));
  sortRepresentatives(language, availableClasses);

  const specializations = representSpecializations(
    entity.id, classesContext.generalizations);

  return {
    language,
    availableModels,
    writableModels,
    model: representModels(visualModel, [model])[0],
    iri: entity.iri ?? "",
    iriPrefix: getModelIri(model),
    isIriAutogenerated: false,
    isIriRelative: false,
    name: entity.name ?? {},
    description: entity.description ?? {},
    availableSpecializations: availableClasses,
    specializations,
  };
}
