import { useMemo } from "react";

import { VisualModel } from "@dataspecer/core-v2/visual-model";
import { InMemorySemanticModel } from "@dataspecer/core-v2/semantic-model/in-memory";

import { type DialogProps } from "../dialog-api";
import { generateName } from "../../util/name-utils";
import { getModelIri } from "../../util/iri-utils";
import { configuration } from "../../application";
import { ModelGraphContextType } from "../../context/model-context";
import { EntityRepresentative, representClasses, representModels, selectWritableModels, sortRepresentatives, Specialization } from "../utilities/dialog-utilities";
import { ClassesContextType } from "../../context/classes-context";
import { removeFromArray } from "../../utilities/functional";
import { sanitizeDuplicitiesInRepresentativeLabels } from "../../utilities/label";
import { getRandomName } from "../../util/random-gen";
import { createCreateEntityController, createEntityController, CreateEntityState, CreateEntityStateController, createSpecializationController, EntityState, EntityStateController, SpecializationState, SpecializationStateController } from "../utilities/entity-utilities";

export interface CreateClassDialogState extends EntityState, CreateEntityState, SpecializationState {

  language: string;

}

export function createCreateClassDialogState(
  classesContext: ClassesContextType,
  graphContext: ModelGraphContextType,
  visualModel: VisualModel | null,
  language: string,
  model: InMemorySemanticModel,
): CreateClassDialogState {
  const models = [...graphContext.models.values()];
  const availableModels = representModels(visualModel, models);
  const writableModels = representModels(visualModel, selectWritableModels(models));

  const name = generateName();

  const availableClasses = sanitizeDuplicitiesInRepresentativeLabels(
    availableModels,
    representClasses(models, classesContext.classes));
  sortRepresentatives(language, availableClasses);

  return {
    language,
    availableModels,
    writableModels,
    model: representModels(visualModel, [model])[0],
    iri: configuration().nameToClassIri(name),
    iriPrefix: getModelIri(model),
    isIriAutogenerated: true,
    isIriRelative: false,
    name: { [language]: name },
    description: {},
    availableSpecializations: availableClasses,
    specializations: [],
  };
}
export interface CreateClassDialogController extends EntityStateController, CreateEntityStateController, SpecializationStateController {

}

export function useCreateClassDialogController({ changeState }: DialogProps<CreateClassDialogState>): CreateClassDialogController {

  return useMemo(() => {

    const entityController = createEntityController(changeState);

    const newEntityController = createCreateEntityController(
      changeState, entityController, configuration().nameToClassIri);

      const specializationController = createSpecializationController(changeState);

    return {
      ...entityController,
      ...newEntityController,
      ...specializationController,
    };
  }, [changeState]);
}
