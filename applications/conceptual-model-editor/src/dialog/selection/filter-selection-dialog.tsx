import { Dispatch, SetStateAction, useState } from "react";
import { DialogProps, DialogWrapper } from "../dialog-api";
import { CreateButton } from "../../components/dialog/buttons/create-button";
import { CancelButton } from "../../components/dialog/buttons/cancel-button";
import { useActions } from "../../action/actions-react-binding";
import { createFilterSelectionState, FilterSelectionState, useFilterSelectionController } from "./filter-selection-dialog-controller";
import { stat } from "fs";
import { ReactFlowInstance } from "@xyflow/react";
import { EdgeType, NodeType } from "../../diagram/diagram-controller";
import { Selections, SelectionsWithIdInfo, TotalFilter } from "../../action/filter-selection-action";




/**
 * Represents one concrete extension/filter data used to render checkbox for the extension/filter.
 */
type CheckboxData = {
    checked: boolean;
    checkboxText: string;
    checkboxTooltip: string;
}

/**
 * {@link CheckboxData} but with one additional property for the type of filter it represents
 */
type TotalFilterData = {
    checked: boolean;
    setChecked: Dispatch<SetStateAction<boolean>>;
    checkboxText: string;
    checkboxTooltip: string;
    totalFilterType: TotalFilter;
}

//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

export const createFilterSelectionDialog = (
    onConfirm: (state: FilterSelectionState) => void | null,
    selections: SelectionsWithIdInfo,
    setSelectionInDiagram: (selections: Selections) => void,
  ): DialogWrapper<FilterSelectionState> => {
    return {
      label: "filter-selection-dialog.label",
      component: CreateFilterSelectionDialog,
      state: createFilterSelectionState(selections, setSelectionInDiagram),
      confirmLabel: "filter-selection-dialog.btn-ok",
      cancelLabel: "filter-selection-dialog.btn-cancel",
      validate: null,
      onConfirm,
      onClose: null,
      dialogClassNames: "",
    };
  };


export const CreateFilterSelectionDialog = (props: DialogProps<FilterSelectionState>) => {
    const state = props.state;
    const controller = useFilterSelectionController(props);

    /**
     * Component which renders given {@link CheckboxData} as checkbox.
     * @param checkboxData
     * @returns
     */
    const optionsCheckboxComponent = (checkboxData: CheckboxData, index: number) => {
        return <div>
                    <label title={checkboxData.checkboxTooltip}>
                        <input type="checkbox"

                                checked={checkboxData.checked}
                                onChange={(event) => {
                                    controller.setFilterActivness({index, isActive: event.target.checked});
                                }}>
                        </input>
                        {checkboxData.checkboxText}
                    </label>
        </div>;
    };


    /**
     * Component with controls for the reduction of current selection.
     * @returns
     */
    const TotalReductionControls = () => {
        return <div>
            {state.filters.map((checkboxState, index) => {
                return optionsCheckboxComponent(checkboxState, index);
            })}
        </div>;
    };



    //////////////////////////////////////////////////////
    //////////////////////////////////////////////////////

    const SimpleHorizontalLineSeparator = () => {
        // Kinda generated by ChatGPT
        return <div className="mb-2 mt-2 border-t border-gray-300"></div>;
    };


    /**
     * Component with the main content of dialog. So everything except header and footer.
     */
    const DialogContent = () => {
        return <div>
            <TotalReductionControls></TotalReductionControls>
            <SimpleHorizontalLineSeparator/>
        </div>;
    };


    return <DialogContent/>;
};
