import { VisualModel } from "@dataspecer/core-v2/visual-model";
import { ClassesContextType } from "../../context/classes-context";
import { ModelGraphContextType } from "../../context/model-context";
import { InMemorySemanticModel } from "@dataspecer/core-v2/semantic-model/in-memory";
import { EditAttributeDialogState } from "./edit-attribute-dialog-controller";
import { findRepresentative, InvalidEntity, isRepresentingAttribute, prepareModels, representCardinalities, representCardinality, representClasses, representDataTypes, representModel, representModels, representOwlThing, representRelationships, representSpecializations, representUndefinedCardinality, selectWritableModels, sortRepresentatives } from "../utilities/dialog-utilities";
import { sanitizeDuplicitiesInRepresentativeLabels } from "../../utilities/label";
import { createLogger } from "../../application";
import { getModelIri, isIriAbsolute } from "../../util/iri-utils";
import { SemanticModelRelationship } from "@dataspecer/core-v2/semantic-model/concepts";
import { getDomainAndRange } from "../../util/relationship-utils";

const LOG = createLogger(import.meta.url);

export function createEditAttributeDialogState(
  classesContext: ClassesContextType,
  graphContext: ModelGraphContextType,
  visualModel: VisualModel | null,
  language: string,
  semanticModel: InMemorySemanticModel,
  entity: SemanticModelRelationship,
): EditAttributeDialogState {

  const { domain, range } = getDomainAndRange(entity);
  if (range === null) {
    LOG.invalidEntity(entity.id, "Range is null!");
    throw new InvalidEntity(entity);
  }

  const models = prepareModels(graphContext, visualModel);
  const model = representModel(visualModel, semanticModel);

  const availableClasses = sanitizeDuplicitiesInRepresentativeLabels(
    models.all, representClasses(models.raw, classesContext.classes));
  sortRepresentatives(language, availableClasses);

  const availableSpecializations = sanitizeDuplicitiesInRepresentativeLabels(
    models.all, representRelationships(models.raw, classesContext.relationships))
    .filter(item => isRepresentingAttribute(item))
    .filter(item => item.identifier !== entity.id);
  sortRepresentatives(language, availableClasses);

  const specializations = representSpecializations(
    entity.id, classesContext.generalizations);

  const owlThing = representOwlThing();

  const availableDataTypes = representDataTypes();
  sortRepresentatives(language, availableDataTypes);

  return {
    language,
    availableModels: models.all,
    // Provide only one option to select a model.
    writableModels: [model],
    model: model,
    iri: range.iri ?? "",
    iriPrefix: getModelIri(model.model),
    isIriAutogenerated: false,
    isIriRelative: !isIriAbsolute(range.iri),
    name: range.name,
    description: range.description,
    availableSpecializations,
    specializations,
    domain: findRepresentative(availableClasses, domain?.concept) ?? owlThing,
    domainCardinality: representCardinality(domain?.cardinality),
    availableDomainItems: [owlThing, ...availableClasses],
    range: findRepresentative(availableClasses, range?.concept) ?? owlThing,
    rangeCardinality: representCardinality(range?.cardinality),
    availableRangeItems: [...availableDataTypes],
    availableCardinalities: [representUndefinedCardinality(), ...representCardinalities()],
  };
}
