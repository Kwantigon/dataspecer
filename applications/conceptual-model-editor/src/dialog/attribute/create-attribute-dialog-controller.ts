import { useMemo } from "react";

import { InMemorySemanticModel } from "@dataspecer/core-v2/semantic-model/in-memory";
import { VisualModel } from "@dataspecer/core-v2/visual-model";

import { ClassesContextType } from "../../context/classes-context";
import { ModelGraphContextType } from "../../context/model-context";
import { generateName } from "../../util/name-utils";
import { sanitizeDuplicitiesInRepresentativeLabels } from "../../utilities/label";
import { configuration } from "../../application";
import { getModelIri } from "../../util/iri-utils";
import { DialogProps } from "../dialog-api";
import { createCreateEntityController, createEntityController, CreateEntityState, CreateEntityStateController, EntityState, EntityStateController } from "../utilities/entity-utilities";
import { Cardinality, DataTypeRepresentative, EntityRepresentative, representCardinalities, representClasses, representDataTypes, representModels, representOwlThing, representUndefinedCardinality, representUndefinedClass, representUndefinedDataType, selectWritableModels, sortRepresentatives } from "../utilities/dialog-utilities";

export interface CreateAttributeDialogState extends EntityState, CreateEntityState {

  language: string;

  /**
   * Domain.
   */
  domain: EntityRepresentative;

  /**
   * Domain cardinality.
   */
  domainCardinality: Cardinality;

  /**
   * Available domain items.
   */
  availableDomainItems: EntityRepresentative[];

  /**
   * Range.
   */
  range: DataTypeRepresentative;

  /**
   * Range cardinality.
   */
  rangeCardinality: Cardinality;

  /**
   * Available range items.
   */
  availableRangeItems: DataTypeRepresentative[];

  availableCardinalities: Cardinality[];

}

export function createCreateAttributeDialogState(
  classesContext: ClassesContextType,
  graphContext: ModelGraphContextType,
  visualModel: VisualModel | null,
  language: string,
  model: InMemorySemanticModel,
): CreateAttributeDialogState {
  const models = [...graphContext.models.values()];
  const availableModels = representModels(visualModel, models);
  const writableModels = representModels(visualModel, selectWritableModels(models));

  const name = generateName();

  const availableClasses = sanitizeDuplicitiesInRepresentativeLabels(
    availableModels, representClasses(models, classesContext.classes));
  sortRepresentatives(language, availableClasses);

  const owlThing = representOwlThing();

  const availableDataTypes = representDataTypes();
  sortRepresentatives(language, availableDataTypes);

  return {
    language,
    availableModels,
    writableModels,
    model: representModels(visualModel, [model])[0],
    iri: configuration().nameToClassIri(name),
    iriPrefix: getModelIri(model),
    isIriAutogenerated: true,
    isIriRelative: false,
    name: { [language]: name },
    description: {},
    domain: owlThing,
    domainCardinality: representUndefinedCardinality(),
    availableDomainItems: [owlThing, ...availableClasses],
    range: availableDataTypes[0],
    rangeCardinality: representUndefinedCardinality(),
    availableRangeItems: [...availableDataTypes],
    availableCardinalities: [representUndefinedCardinality(), ...representCardinalities()],
  };
}

export interface CreateAttributeDialogController extends EntityStateController, CreateEntityStateController {

  setDomain: (value: EntityRepresentative) => void;

  setDomainCardinality: (value: Cardinality) => void;

  setRange: (value: DataTypeRepresentative) => void;

  setRangeCardinality: (value: Cardinality) => void;

}

export function useCreateAttributeDialogController({ changeState }: DialogProps<CreateAttributeDialogState>): CreateAttributeDialogController {

  return useMemo(() => {

    const entityController = createEntityController(changeState);

    const newEntityController = createCreateEntityController(
      changeState, entityController, configuration().nameToIri);

    const setDomain = (value: EntityRepresentative) => {
      changeState((state) => ({ ...state, domain: value }));
    };

    const setDomainCardinality = (value: Cardinality) => {
      changeState((state) => ({ ...state, domainCardinality: value }));
    };

    const setRange = (value: DataTypeRepresentative) => {
      changeState((state) => ({ ...state, range: value }));
    };

    const setRangeCardinality = (value: Cardinality) => {
      changeState((state) => ({ ...state, rangeCardinality: value }));
    };

    return {
      ...entityController,
      ...newEntityController,
      setDomain,
      setDomainCardinality,
      setRange,
      setRangeCardinality,
    };
  }, [changeState]);
}
