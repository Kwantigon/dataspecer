import { VisualModel } from "@dataspecer/core-v2/visual-model";
import { ClassesContextType } from "../../context/classes-context";
import { ModelGraphContextType } from "../../context/model-context";
import { InMemorySemanticModel } from "@dataspecer/core-v2/semantic-model/in-memory";
import { EditAttributeDialogState } from "./edit-attribute-dialog-controller";
import { isRepresentingAttribute, prepareModels, representCardinalities, representClasses, representDataTypes, representModel, representModels, representOwlThing, representRelationships, representSpecializations, representUndefinedCardinality, selectWritableModels, sortRepresentatives } from "../utilities/dialog-utilities";
import { generateName } from "../../util/name-utils";
import { sanitizeDuplicitiesInRepresentativeLabels } from "../../utilities/label";
import { configuration } from "../../application";
import { getModelIri } from "../../util/iri-utils";

export function createNewAttributeDialogState(
  classesContext: ClassesContextType,
  graphContext: ModelGraphContextType,
  visualModel: VisualModel | null,
  language: string,
  semanticModel: InMemorySemanticModel,
): EditAttributeDialogState {
  const models = prepareModels(graphContext, visualModel);
  const model = representModel(visualModel, semanticModel);

  const name = generateName();

  const availableClasses = sanitizeDuplicitiesInRepresentativeLabels(
    models.all, representClasses(models.raw, classesContext.classes));
  sortRepresentatives(language, availableClasses);

  const availableSpecializations = sanitizeDuplicitiesInRepresentativeLabels(
    models.all, representRelationships(models.raw, classesContext.relationships))
    .filter(item => isRepresentingAttribute(item));
  sortRepresentatives(language, availableClasses);

  const owlThing = representOwlThing();

  const availableDataTypes = representDataTypes();
  sortRepresentatives(language, availableDataTypes);

  return {
    language,
    availableModels: models.all,
    writableModels: models.writable,
    model: model,
    iri: configuration().nameToClassIri(name),
    iriPrefix: getModelIri(semanticModel),
    isIriAutogenerated: true,
    isIriRelative: false,
    name: { [language]: name },
    description: {},
    availableSpecializations,
    specializations: [],
    domain: owlThing,
    domainCardinality: representUndefinedCardinality(),
    availableDomainItems: [owlThing, ...availableClasses],
    range: availableDataTypes[0],
    rangeCardinality: representUndefinedCardinality(),
    availableRangeItems: [...availableDataTypes],
    availableCardinalities: [representUndefinedCardinality(), ...representCardinalities()],
  };
}
