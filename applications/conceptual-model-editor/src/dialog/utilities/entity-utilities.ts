import { EntityModel } from "@dataspecer/core-v2";
import { InMemorySemanticModel } from "@dataspecer/core-v2/semantic-model/in-memory";
import { LanguageString } from "@dataspecer/core-v2/semantic-model/concepts";

import { EntityModelRepresentative, EntityRepresentative, Specialization } from "./dialog-utilities";
import { getModelIri } from "../../util/iri-utils";
import { IRI } from "iri";
import { getRandomName } from "../../util/random-gen";
import { removeFromArray } from "../../utilities/functional";
import { getAvailableLanguagesForLanguageString } from "../../util/language-utils";

export function isRelativeIri(iri: string | undefined | null): boolean {
  if (iri === undefined || iri === null) {
    return true;
  }
  return (new IRI(iri).scheme()?.length ?? 0) === 0;
}

/**
 * Shared interface for entity dialogs.
 */
export interface EntityState {

  /**
   * Available models.
   */
  availableModels: EntityModelRepresentative<EntityModel>[];

  /**
   * Available writable models.
   * Those can be set as owners.
   */
  writableModels: EntityModelRepresentative<InMemorySemanticModel>[];

  /**
   * Entity owner.
   */
  model: EntityModelRepresentative<InMemorySemanticModel>;

  iri: string;

  name: LanguageString;

  description: LanguageString;

}

export interface EntityStateController {

  setModel: (model: EntityModelRepresentative<InMemorySemanticModel>) => void;

  setIri: (iri: string) => void;

  setName: (setter: (value: LanguageString) => LanguageString) => void;

  setDescription: (setter: (value: LanguageString) => LanguageString) => void;

}

export function createEntityController<State extends EntityState>(
  changeState: (next: State | ((prevState: State) => State)) => void,
): EntityStateController {

  const setModel = (model: EntityModelRepresentative<InMemorySemanticModel>) => {
    changeState((state) => {
      return {
        ...state,
        model: model,
        baseIri: getModelIri(model.model),
      };
    });
  };

  const setIri = (iri: string) => {
    changeState((state) => ({ ...state, iri }));
  };

  const setName = (setter: (value: LanguageString) => LanguageString): void => {
    changeState((state) => ({ ...state, name: setter(state.name) }));
  };

  const setDescription = (setter: (value: LanguageString) => LanguageString): void => {
    changeState((state) => ({ ...state, description: setter(state.description) }));
  };

  return {
    setModel,
    setIri,
    setName,
    setDescription,
  };
}

export interface SpecializationState {

  /**
   * List of all available specializations.
   */
  availableSpecializations: EntityRepresentative[];

  /**
   * List of active specializations.
   */
  specializations: Specialization[];

}

export interface SpecializationStateController {

  addSpecialization: (specialized: string) => void;

  removeSpecialization: (value: Specialization) => void;

}

export function createSpecializationController<State extends SpecializationState>(
  changeState: (next: State | ((prevState: State) => State)) => void,
): SpecializationStateController {

  const addSpecialization = (specialized: string): void => {
    changeState((state) => ({
      ...state, specializations: [...state.specializations, {
        specialized,
        iri: getRandomName(10),
      }]
    }));
  };

  const removeSpecialization = (value: Specialization): void => {
    changeState((state) => ({
      ...state,
      specializations: removeFromArray(state.specializations, value),
    }));
  };

  return {
    addSpecialization,
    removeSpecialization,
  };
}

/**
 * Shared for interface for new entities.
 */
export interface CreateEntityState {

  iri: string;

  /**
   * IRI prefix.
   */
  iriPrefix: string;

  /**
   * If true, change in name result in generation of IRI.
   */
  isIriAutogenerated: boolean;

  /**
   * If true the IRI is relative with respect to model.
   */
  isIriRelative: boolean;

}

export interface CreateEntityStateController {

  setModel: (model: EntityModelRepresentative<InMemorySemanticModel>) => void;

  setIri: (iri: string) => void;

  setIsRelative: (value: boolean) => void;

  setName: (setter: (value: LanguageString) => LanguageString) => void;

}

export function createCreateEntityController<State extends (EntityState & CreateEntityState)>(
  changeState: (next: State | ((prevState: State) => State)) => void,
  controller: EntityStateController,
  /**
   * Function used to generate IRI from a name.
   */
  generateIriFromName: (name: string) => string,
): CreateEntityStateController {

  const setModel = (model: EntityModelRepresentative<InMemorySemanticModel>) => {
    controller.setModel(model);
    // Update IRI prefix.
    const iriPrefix = getModelIri(model.model);
    changeState(state => ({ ...state, iriPrefix }));
  };

  const setIri = (iri: string) => {
    controller.setIri(iri);
    // Turn off generation.
    changeState(state => ({ ...state, isIriAutogenerated: false }));
  };

  const setIsRelative = (value: boolean) => {
    // We also need to change value of the IRI.
    changeState(state => {
      let iri;
      if (value) {
        // We change from absolute to relative.
        iri = state.iri.replace(state.iriPrefix, "");
      } else {
        // We change form relative to absolute.
        iri = state.iriPrefix + state.iri;
      }
      return {
        ...state,
        iri,
        isIriRelative: value,
      };
    });
  };

  const setName = (setter: (value: LanguageString) => LanguageString): void => {
    controller.setName(setter);
    changeState(state => {
      if (!state.isIriAutogenerated) {
        return state;
      }
      const languages = getAvailableLanguagesForLanguageString(state.name);
      if (languages.length === 0) {
        return state;
      }
      const name = state.name[languages[0]] ?? "";
      return {
        ...state,
        iri: generateIriFromName(name),
      };
    });
  };

  return {
    setModel,
    setIri,
    setIsRelative,
    setName,
  };
}
